import leon.collection._
import leon.webDSL.webDescription._
import leon.webDSL.webBuilding._
import implicits._

object Main {
    val title = "Implicit website builder"
  
    val tcheck = ^.tpe := "checkbox"
    def check(s: String): WebTree = <.span(<.label(<.input(tcheck, ^.value := s), s), <.br())
  
    val pizzaChoices = List(
      "Margherita",
      "Tina",
      "Sudjuk",
      "Ham",
      "Vegetarian"
    )
    
    def makeList(l: List[String]): String = l match {
      case Cons(a, b: Cons[String]) => a + ", " + makeList(b)
      case Nil() => ""
      case Cons(a, Nil()) => a
    }
  
    //This function is called by the evaluator. It has to return a WebPage
    def main() = {
      val welcome = "Welcome to " + title + "!"
      val p = <.p("You are looking at the page generated by the code on the " +
      "left. " + title + " is a technology allowing you to " +
      "either modify the code or the view. Try it now! Edit this paragraph!", <.br(),
      "Please choose one pizza between " + makeList(pizzaChoices)
      )
      val h = <.h2(welcome, ^.color := "#5E68F7")
      val finalButton = <.input(
        ^.tpe := "button",
        ^.value := "Order that for me, "+title+" is awesome!")
     val c = pizzaChoices.map(pizza => check(pizza))
     
     val choices = <.div(c)
        
      val w = WebPage(<.div(h, p, choices, finalButton))
      w
    }
}
